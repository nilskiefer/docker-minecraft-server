name: Build and Publish
on:
  push:
    branches:
      - master
      - test/**
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - "*.md"
      - "docs/**"
      - "examples/**"
      - "notes/**"
      - "kustomize/**"

jobs:
  build:
    # Define job-level environment variables.
    # Note: You cannot reference one job-level env var inside another.
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_USER }}/minecraft-server
      IMAGE_TO_TEST: ${{ secrets.DOCKER_USER }}/minecraft-server:test-${{ matrix.variant }}-${{ github.run_id }}
      HAS_IMAGE_REPO_ACCESS: ${{ secrets.DOCKER_USER != '' && secrets.DOCKER_PASSWORD != '' }}
      MAIN_VARIANT: java21
    strategy:
      fail-fast: false
      matrix:
        # NOTE: the "latest" variant is identified in the Docker meta step's 'latest' config
        variant:
          - java23
          - java23-graalvm
          - java21
          - java21-alpine
          - java21-graalvm
          - java21-jdk
          - java17
          - java17-graalvm
          - java17-alpine
          - java8
          - java8-graalvm-ce
          - java8-openj9
          - java8-jdk
          - java11
        include:
          # JAVA 23:
          - variant: java23
            baseImage: eclipse-temurin:23-jre
            platforms: linux/amd64,linux/arm64
            mcVersion: latest
          - variant: java23-graalvm
            baseImage: container-registry.oracle.com/graalvm/jdk:23-ol8
            platforms: linux/amd64,linux/arm64
            mcVersion: latest
          # JAVA 21:
          - variant: java21-graalvm
            baseImage: container-registry.oracle.com/graalvm/jdk:21-ol8
            platforms: linux/amd64,linux/arm64
            mcVersion: latest
          - variant: java21
            baseImage: eclipse-temurin:21-jre
            platforms: linux/amd64,linux/arm64
            mcVersion: latest
          - variant: java21-jdk
            baseImage: eclipse-temurin:21
            platforms: linux/amd64,linux/arm64
            mcVersion: latest
          - variant: java21-alpine
            baseImage: eclipse-temurin:21-jre-alpine
            platforms: linux/amd64,linux/arm64
            mcVersion: latest
          # JAVA 17:
          - variant: java17
            baseImage: eclipse-temurin:17-jre-focal
            platforms: linux/amd64,linux/arm/v7,linux/arm64
            mcVersion: 1.20.4
          - variant: java17-graalvm
            baseImage: container-registry.oracle.com/graalvm/jdk:17-ol8
            platforms: linux/amd64,linux/arm64
            mcVersion: 1.20.4
          - variant: java17-alpine
            baseImage: eclipse-temurin:17-jre-alpine
            platforms: linux/amd64
            mcVersion: 1.20.4
          # JAVA 11:
          - variant: java11
            baseImage: adoptopenjdk:11-jre-hotspot
            platforms: linux/amd64,linux/arm/v7,linux/arm64
            mcVersion: 1.16.5
          # JAVA 8: NOTE: Unable to go past 8u312 because of Forge dependencies
          - variant: java8
            baseImage: eclipse-temurin:8u312-b07-jre-focal
            platforms: linux/amd64,linux/arm/v7,linux/arm64
            mcVersion: 1.12.2
          - variant: java8-graalvm-ce
            baseImage: ghcr.io/graalvm/graalvm-ce:java8
            platforms: linux/amd64
            mcVersion: 1.12.2
          - variant: java8-jdk
            baseImage: eclipse-temurin:8u312-b07-jdk-focal
            platforms: linux/amd64,linux/arm64
            mcVersion: 1.12.2
          - variant: java8-openj9
            baseImage: ibm-semeru-runtimes:open-8u312-b07-jre
            platforms: linux/amd64,linux/arm64
            mcVersion: 1.12.2
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: |
            ${{ env.DOCKER_REPO }}
            ghcr.io/${{ env.DOCKER_REPO }}
          tags: |
            type=ref,event=tag,enable=${{ matrix.variant == env.MAIN_VARIANT }}
            type=ref,event=tag,suffix=-${{ matrix.variant }}
            type=ref,event=branch,suffix=-${{ matrix.variant }},enable=${{ github.ref_name != github.event.repository.default_branch }}
            type=raw,value=stable,enable=${{ github.ref_type == 'tag' && matrix.variant == env.MAIN_VARIANT }}
            type=raw,value=${{ matrix.variant }},enable=${{ github.ref_name == github.event.repository.default_branch }}
            type=raw,value=java8-multiarch,enable=${{ matrix.variant == 'java8' && github.ref_name == github.event.repository.default_branch }}
          flavor: |
            latest=${{ matrix.variant == env.MAIN_VARIANT && github.ref_name == github.event.repository.default_branch }}
          labels: |
            org.opencontainers.image.authors=Geoff Bourne <itzgeoff@gmail.com>

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0

      - name: Build for test
        uses: docker/build-push-action@v6.13.0
        with:
          platforms: linux/amd64
          tags: ${{ env.IMAGE_TO_TEST }}
          pull: true
          load: true
          push: false
          build-args: |
            BASE_IMAGE=${{ matrix.baseImage }}
          cache-from: type=gha,scope=${{ matrix.variant }}

      - name: Run tests
        env:
          MINECRAFT_VERSION: ${{ matrix.mcVersion }}
          VARIANT: ${{ matrix.variant }}
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        run: |
          tests/test.sh

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        if: env.HAS_IMAGE_REPO_ACCESS
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3.3.0
        if: env.HAS_IMAGE_REPO_ACCESS
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push
        uses: docker/build-push-action@v6.13.0
        if: github.actor == github.repository_owner
        with:
          platforms: ${{ matrix.platforms }}
          push: >
            ${{ 
            github.ref_type == 'tag' 
            || github.ref_name == github.event.repository.default_branch
            || startsWith(github.ref_name, 'test/')
            || ( github.event_name == 'pull_request' 
                 && env.HAS_IMAGE_REPO_ACCESS 
                 && contains(github.event.pull_request.labels.*.name, 'ci/push-image') 
               )
            }}
          tags: ${{ steps.meta.outputs.tags }}
          pull: true
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          build-args: |
            BASE_IMAGE=${{ matrix.baseImage }}
            BUILD_FILES_REV=${{ steps.build-files-rev.outputs.REV }}
          cache-from: type=gha,scope=${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant }}
